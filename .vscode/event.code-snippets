{
	// Place your banana-logger workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	"Full Event": {
		"prefix": "event",
		"body": [
			"import { LogService } from \"../services/LogService\";",
			"import { Event } from \"../structures\";",
			"",
			"export const $1Event = new Event({",
			"	name: \"$1\",",
			"	handler: async ($2) => {",
			"		// Loggiging $1",
			"		{",
			"			const [data, log] = LogService.setup({",
			"				eventName: \"$1\",",
			"				relatedUsers: [],",
			"				relatedChannels: [],",
			"				guild: null",
			"			});",
			"",
			"                        $0",
			"",
			"			log(data);",
			"		}",
			"	}",
			"});",
			""
		],
		"description": ""
	},
	"log event": {
		"prefix": "log event",
		"body": [
			"// Loggiging $1",
			"{",
			"	const [data, log] = LogService.setup({",
			"		eventName: \"$1\",",
			"		relatedUsers: [],",
			"		relatedChannels: [],",
			"		guild: null,",
			"	});",
			"",
			"        $0",
			"	",
			"	log(data);",
			"}"
		],
		"description": ""
	}
}
