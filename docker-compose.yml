services:
  bot:
    env_file: .env
    container_name: banana-logger-bot
    image: ghcr.io/eduardozgz/banana-logger-bot:latest
    restart: always
    networks:
      - banana-logger

  frontend:
    env_file: .env
    container_name: banana-logger-frontend
    image: ghcr.io/eduardozgz/banana-logger-frontend:latest
    ports:
      - "3000:80"
    restart: always
    networks:
      - banana-logger

  backend:
    env_file: .env
    container_name: banana-logger-backend
    image: ghcr.io/eduardozgz/banana-logger-backend:latest
    ports:
      - "3001:3000"
    restart: always
    networks:
      - banana-logger

  db-utils:
    env_file: .env
    container_name: banana-logger-db-utils
    image: ghcr.io/eduardozgz/banana-logger-db-utils:latest
    restart: always
    networks:
      - banana-logger

  mongo:
    image: mongo:7
    container_name: MongoDB
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh --quiet | grep 1
      interval: 5s
      timeout: 10s
      retries: 30
      start_period: 20s
    volumes:
      - ./storage/db:/data/db
    expose:
      - 27017
    restart: unless-stopped
    networks:
      - banana-logger

  setup-mongo-rs:
    image: mongo:7
    container_name: Setup-MongoDB-ReplicaSet
    command: 'mongosh mongodb://mongo:27017/banana-logger-bot --eval=''rs.initiate({ _id: "rs0", members: [{_id: 0, host:"mongo:27017"}] }).ok'' --quiet | grep 1'
    depends_on:
      mongo:
        condition: service_healthy
        restart: true
    restart: "no"
    networks:
      - banana-logger

  redis:
    image: redis
    command: redis-server
    container_name: Redis
    restart: unless-stopped
    networks:
      - banana-logger
    ports:
      - "6379:6379"

networks:
  banana-logger:
